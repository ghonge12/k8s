Role-Based Access Control (RBAC) in Kubernetes is a powerful method to control access to resources within a cluster. RBAC allows you to define roles with specific permissions and then assign those roles to users or groups. Here's a step-by-step example to set up RBAC in Kubernetes:

1. Create a Namespace
First, create a namespace to scope your RBAC policies:

apiVersion: v1
kind: Namespace
metadata:
  name: example-namespace



Apply the namespace:
kubectl apply -f namespace.yaml


2. Define Roles
Next, define a role with specific permissions. For example, you can create a role that allows reading pods in the namespace:

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: example-namespace
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]


Apply the role:
kubectl apply -f role.yaml

3. Create RoleBindings
Now, bind the role to a user or group. This example binds the pod-reader role to a user called example-user:

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods
  namespace: example-namespace
subjects:
- kind: User
  name: example-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io



Apply the role binding:
kubectl apply -f rolebinding.yaml


4. Define ClusterRoles (Optional)
If you need to define roles that apply cluster-wide, use a ClusterRole. Here's an example that allows listing all namespaces in the cluster:


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: namespace-reader
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]

Apply the cluster role:
kubectl apply -f clusterrole.yaml


5. Create ClusterRoleBindings (Optional)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: read-namespaces
subjects:
- kind: User
  name: example-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: namespace-reader
  apiGroup: rbac.authorization.k8s.io


Apply the cluster role binding:
kubectl apply -f clusterrolebinding.yaml


Summary
Namespace: Scope the RBAC policies.
Role: Define permissions within a namespace.
RoleBinding: Assign the role to a user within the namespace.
ClusterRole: Define permissions cluster-wide (optional).
ClusterRoleBinding: Assign the cluster role to a user cluster-wide (optional).
This setup ensures that users have only the permissions they need and nothing more, improving the security and manageability of your Kubernetes cluster.
